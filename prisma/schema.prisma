// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId       Int                @id @default(autoincrement())
  name         String
  email        String             @unique
  password     String
  status       String             @default("pending")
  image        String?
  about        String?
  roles        String[]
  likes        Int[]              @default([])
  visited      Int[]              @default([])
  bookmarks    Int[]              @default([])
  createdAt    DateTime           @default(now())
  updateAt     DateTime           @default(now()) @updatedAt
  posts        Post[]
  hotels       Hotel[]
  transports   Transport[]
  destination  Destination[]
  favorites    Favorite[]
  chats        Chat[]
  participants ChatParticipant[]
  messages     Message[]
  reviews      Review[]
  bookings     Booking[]
  rented       TransportBooking[]
}

model Favorite {
  favId         Int          @id @default(autoincrement())
  user          User         @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId        Int
  post          Post?        @relation(fields: [postId], references: [postId], onDelete: Cascade)
  postId        Int?
  destination   Destination? @relation(fields: [destinationId], references: [destinationId], onDelete: Cascade)
  destinationId Int?
}

model Hotel {
  hotelId     Int      @id @default(autoincrement())
  name        String
  description String
  address     String
  images      Json?
  city        String
  rating      Float    @default(0)
  mapUrl      String
  facilities  String[]
  user        User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId      Int
  rooms       Room[]
  reviews     Review[]
  createdAt   DateTime @default(now())
  updateAt    DateTime @default(now()) @updatedAt
  chats       Chat[]
}

model Transport {
  transportId Int                @id @default(autoincrement())
  title       String
  description String
  make        String
  model       String
  type        String
  pricing     Json
  phone       String
  capacity    String
  city        String
  status      String             @default("available")
  images      Json?
  rating      Int                @default(0)
  user        User               @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId      Int
  createdAt   DateTime           @default(now())
  updateAt    DateTime           @default(now()) @updatedAt
  bookings    TransportBooking[]
  reviews Review[]
}

model Room {
  roomId        Int       @id @default(autoincrement())
  name          String
  description   String
  size          String
  bedType       String
  capacity      String
  pricePerNight Float
  isBooked      Boolean   @default(false)
  checkin       String?
  checkout      String?
  view          String
  images        Json?
  hotel         Hotel     @relation(fields: [hotelId], references: [hotelId], onDelete: Cascade)
  hotelId       Int
  createdAt     DateTime  @default(now())
  updateAt      DateTime  @default(now()) @updatedAt
  bookings      Booking[]
}

model Booking {
  bookingId      Int      @id @default(autoincrement())
  name           String
  nationality    String
  phone          String
  email          String
  checkin        String
  checkout       String
  guests         String
  specialRequest String?
  user           User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId         Int
  room           Room     @relation(fields: [roomId], references: [roomId], onDelete: Cascade)
  roomId         Int
  createdAt      DateTime @default(now())
  updateAt       DateTime @default(now()) @updatedAt
}

model TransportBooking {
  bookingId   Int       @id @default(autoincrement())
  name        String
  nationality String
  phone       String
  email       String
  passangers  Int
  pricePlan   String
  user        User      @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId      Int
  transport   Transport @relation(fields: [transportId], references: [transportId], onDelete: Cascade)
  transportId Int
  createdAt   DateTime  @default(now())
  updateAt    DateTime  @default(now()) @updatedAt
}

model Post {
  postId      Int        @id @default(autoincrement())
  title       String
  description String
  address     String
  city        String
  category    String
  price       Float
  features    String[]
  images      Json?
  user        User       @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId      Int
  favorites   Favorite[]
  createdAt   DateTime   @default(now())
  updateAt    DateTime   @default(now()) @updatedAt
  chats       Chat[]
}

model Destination {
  destinationId Int        @id @default(autoincrement())
  title         String
  location      String
  district      String
  mapUrl        String?
  description   String
  likes         Int        @default(0)
  visits        Int        @default(0)
  images        String[]
  user          User       @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId        Int
  favorites     Favorite[]
  reviews       Review[]
  createdAt     DateTime   @default(now())
  updateAt      DateTime   @default(now()) @updatedAt
}

model Review {
  reviewId      Int          @id @default(autoincrement())
  text          String
  stars         Int
  user          User         @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId        Int
  destination   Destination? @relation(fields: [destinationId], references: [destinationId], onDelete: Cascade)
  destinationId Int?
  hotel         Hotel?       @relation(fields: [hotelId], references: [hotelId], onDelete: Cascade)
  hotelId       Int?
  trasport         Transport?       @relation(fields: [transportId], references: [transportId], onDelete: Cascade)
  transportId       Int?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @default(now()) @updatedAt
}

model Chat {
  chatId       Int               @id @default(autoincrement())
  initiator    User              @relation(fields: [initiatorId], references: [userId], onDelete: Cascade)
  initiatorId  Int
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @default(now()) @updatedAt
  post         Post?             @relation(fields: [postId], references: [postId], onDelete: Cascade)
  postId       Int?
  hotel        Hotel?            @relation(fields: [hotelId], references: [hotelId], onDelete: Cascade)
  hotelId      Int?
  participants ChatParticipant[]
  messages     Message[]
}

model ChatParticipant {
  chatParticipantId Int      @id @default(autoincrement())
  chat              Chat     @relation(fields: [chatId], references: [chatId], onDelete: Cascade)
  chatId            Int
  participant       User     @relation(fields: [participantId], references: [userId], onDelete: Cascade)
  participantId     Int
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now()) @updatedAt
}

model Message {
  messageId   Int      @id @default(autoincrement())
  text        String
  isSeen      Boolean  @default(false)
  attachments Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  sender      User     @relation(fields: [senderId], references: [userId], onDelete: Cascade)
  senderId    Int
  chat        Chat     @relation(fields: [chatId], references: [chatId], onDelete: Cascade)
  chatId      Int
}
